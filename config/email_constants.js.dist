// The sender address for all emails
const senderAddress = 'sealog_admin@oceandatatools.org';

// Additional receipents for and sent emails.
const notificationEmailAddresses = ['sealog_admin@oceandatatools.org'];

// URL of password reset form
// Set the protocol (http/https), serverURL/IP and port number to match the server's configuration
const resetPasswordURL = 'http://localhost:8080/resetPassword/';

// Server-side reCaptcha key, set to '' if not using reCaptcha bot protection
const reCaptchaSecret = '';

// Disable registering users, requires Sealog admin user to enable the accounts prior to use
const disableRegisteringUsers = false;

// Default roles of self-registering users
const registeringUserRoles = ['event_watcher', 'event_logger'];

// Activate per-cruise/per-lowering access permissions
const useAccessControl = false;

// Needed for email integration
let emailTransporter = null; //eslint-disable-line prefer-const
const Nodemailer = require('nodemailer'); // eslint-disable-line no-unused-vars

// ========================================================================= //
// Uncomment ONE of the following sections for email integration
// ========================================================================= //

// ------------------------------------------------------------------------- //
// GMail integration
// ------------------------------------------------------------------------- //
// emailTransporter = Nodemailer.createTransport({
//   service: 'gmail',
//   auth: {
//     user: 'username@gmail.com',
//     pass: 'password'
//   }
// }); // eslint-disable-line no-dupe-keys

// ------------------------------------------------------------------------- //
// GMail OAuth
// ------------------------------------------------------------------------- //

const { google } = require('googleapis');

const OAuth2 = google.auth.OAuth2;
const oauth2Client = new OAuth2(
  '<YOUR-OAuthportal.apps.googleusercontent.com>',
  '<CLIENT-SECRET>',
  'http://sealog-local-install.io'
);

oauth2Client.setCredentials({
  refresh_token: '<REFRESH-TOKEN>'
});

const accessToken = oauth2Client.getAccessToken;

emailTransporter = Nodemailer.createTransport({
  service: 'gmail',
  auth: {
    type: 'OAuth2',
    user: 'datasystems@schmidtocean.org',
    accessToken,
    clientId: '<YOUR-OAuthportal.apps.googleusercontent.com>',
    clientSecret: '<CLIENT-SECRET>',
    refreshToken: '<REFRESH-TOKEN>'
  }
});// eslint-disable-line no-dupe-keys

// ------------------------------------------------------------------------- //
// MailGun integration
// ------------------------------------------------------------------------- //
// const Mg = require('nodemailer-mailgun-transport'); // eslint-disable-line no-unused-vars
// emailTransporter = Nodemailer.createTransport(Mg({
//   auth: {
//     api_key: '<MG_API_KEY>',
//     domain: '<ONE OF YOUR DOMAIN NAMES LISTED AT YOUR https://app.mailgun.com/app/sending/domains>'
//   }
// })); // eslint-disable-line no-dupe-keys


// ------------------------------------------------------------------------- //
// MailJet integration
// ------------------------------------------------------------------------- //
//emailTransporter = Nodemailer.createTransport({
//  service: 'Mailjet', // no need to set host or port etc.
//  auth: {
//    user: '<API_KEY>',
//    pass: '<API_PASS>'
//  }
//}); // eslint-disable-line no-dupe-keys

module.exports = {
  senderAddress,
  emailTransporter,
  notificationEmailAddresses,
  reCaptchaSecret,
  resetPasswordURL,
  disableRegisteringUsers,
  registeringUserRoles,
  useAccessControl
};
